"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const gender_options_1 = require("gender-options");
exports.GenderInput = function GenderInput(props) {
    props = Object.assign({ required: false, preferNotToSay: true, name: 'gender-input', otherReveal: 'select' }, props);
    const handleChange = (event) => {
        props.onUpdate(event.target.value || null);
    };
    const radioOptions = gender_options_1.genderOptions.basic;
    const selectOptions = [
        { label: 'Please choose an option', value: 'other' },
        ...gender_options_1.genderOptions.standard.filter((val) => !radioOptions.includes(val)),
    ];
    const otherSelected = Boolean(props.value === 'other' || selectOptions.find(({ value }) => value === props.value));
    const output = [
        radioOptions.map(({ label, value }) => (react_1.default.createElement("label", { key: value },
            react_1.default.createElement("input", { name: props.name, type: "radio", checked: props.value === value, value: value, onChange: handleChange, required: props.required }),
            label))),
        react_1.default.createElement("label", { key: "other" },
            react_1.default.createElement("input", { name: props.name, type: "radio", checked: otherSelected, value: "other", onChange: handleChange, required: props.required }),
            props.otherReveal === 'select' ? 'Other/Non-binary other' : 'Other'),
    ];
    if (props.value && otherSelected && props.otherReveal === 'select') {
        output.push(react_1.default.createElement("select", { key: "full-select", name: `${props.name}-other`, value: props.value, onChange: handleChange }, selectOptions.map(({ label, value }) => (react_1.default.createElement("option", { key: value, value: value }, label)))));
    }
    if (props.preferNotToSay) {
        output.push(react_1.default.createElement("label", { key: "prefer-not-to-say" },
            react_1.default.createElement("input", { name: props.name, type: "radio", checked: props.value === null, value: undefined, onChange: handleChange, required: props.required }),
            "Prefer not to say"));
    }
    return react_1.default.createElement(react_1.Fragment, null, output);
};
//# sourceMappingURL=gender-input.js.map